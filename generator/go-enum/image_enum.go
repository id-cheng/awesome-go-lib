// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package main

import (
	"errors"
	"fmt"
)

const (
	// ImageTypeJpeg is a ImageType of type Jpeg.
	ImageTypeJpeg ImageType = iota
	// ImageTypeJpg is a ImageType of type Jpg.
	ImageTypeJpg
	// ImageTypePng is a ImageType of type Png.
	ImageTypePng
	// ImageTypeTiff is a ImageType of type Tiff.
	ImageTypeTiff
	// ImageTypeGif is a ImageType of type Gif.
	ImageTypeGif
)

var ErrInvalidImageType = errors.New("not a valid ImageType")

const _ImageTypeName = "jpegjpgpngtiffgif"

var _ImageTypeMap = map[ImageType]string{
	ImageTypeJpeg: _ImageTypeName[0:4],
	ImageTypeJpg:  _ImageTypeName[4:7],
	ImageTypePng:  _ImageTypeName[7:10],
	ImageTypeTiff: _ImageTypeName[10:14],
	ImageTypeGif:  _ImageTypeName[14:17],
}

// String implements the Stringer interface.
func (x ImageType) String() string {
	if str, ok := _ImageTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ImageType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ImageType) IsValid() bool {
	_, ok := _ImageTypeMap[x]
	return ok
}

var _ImageTypeValue = map[string]ImageType{
	_ImageTypeName[0:4]:   ImageTypeJpeg,
	_ImageTypeName[4:7]:   ImageTypeJpg,
	_ImageTypeName[7:10]:  ImageTypePng,
	_ImageTypeName[10:14]: ImageTypeTiff,
	_ImageTypeName[14:17]: ImageTypeGif,
}

// ParseImageType attempts to convert a string to a ImageType.
func ParseImageType(name string) (ImageType, error) {
	if x, ok := _ImageTypeValue[name]; ok {
		return x, nil
	}
	return ImageType(0), fmt.Errorf("%s is %w", name, ErrInvalidImageType)
}

// MarshalText implements the text marshaller method.
func (x ImageType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ImageType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseImageType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
